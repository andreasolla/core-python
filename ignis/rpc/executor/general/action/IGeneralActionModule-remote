#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.general.action import IGeneralActionModule
from ignis.rpc.executor.general.action.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void execute(ISource src)')
    print('  void reduce(ISource src)')
    print('  void treeReduce(ISource src)')
    print('  void collect()')
    print('  void aggregate(ISource zero, ISource seqOp, ISource combOp)')
    print('  void treeAggregate(ISource zero, ISource seqOp, ISource combOp)')
    print('  void fold(ISource zero, ISource src)')
    print('  void treeFold(ISource zero, ISource src)')
    print('  void take(i64 num)')
    print('  void foreach_(ISource src)')
    print('  void foreachPartition(ISource src)')
    print('  void foreachExecutor(ISource src)')
    print('  void top(i64 num)')
    print('  void top2(i64 num, ISource cmp)')
    print('  void takeOrdered(i64 num)')
    print('  void takeOrdered2(i64 num, ISource cmp)')
    print('  void keys()')
    print('  void values()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IGeneralActionModule.Client(protocol)
transport.open()

if cmd == 'execute':
    if len(args) != 1:
        print('execute requires 1 args')
        sys.exit(1)
    pp.pprint(client.execute(eval(args[0]),))

elif cmd == 'reduce':
    if len(args) != 1:
        print('reduce requires 1 args')
        sys.exit(1)
    pp.pprint(client.reduce(eval(args[0]),))

elif cmd == 'treeReduce':
    if len(args) != 1:
        print('treeReduce requires 1 args')
        sys.exit(1)
    pp.pprint(client.treeReduce(eval(args[0]),))

elif cmd == 'collect':
    if len(args) != 0:
        print('collect requires 0 args')
        sys.exit(1)
    pp.pprint(client.collect())

elif cmd == 'aggregate':
    if len(args) != 3:
        print('aggregate requires 3 args')
        sys.exit(1)
    pp.pprint(client.aggregate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'treeAggregate':
    if len(args) != 3:
        print('treeAggregate requires 3 args')
        sys.exit(1)
    pp.pprint(client.treeAggregate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'fold':
    if len(args) != 2:
        print('fold requires 2 args')
        sys.exit(1)
    pp.pprint(client.fold(eval(args[0]), eval(args[1]),))

elif cmd == 'treeFold':
    if len(args) != 2:
        print('treeFold requires 2 args')
        sys.exit(1)
    pp.pprint(client.treeFold(eval(args[0]), eval(args[1]),))

elif cmd == 'take':
    if len(args) != 1:
        print('take requires 1 args')
        sys.exit(1)
    pp.pprint(client.take(eval(args[0]),))

elif cmd == 'foreach_':
    if len(args) != 1:
        print('foreach_ requires 1 args')
        sys.exit(1)
    pp.pprint(client.foreach_(eval(args[0]),))

elif cmd == 'foreachPartition':
    if len(args) != 1:
        print('foreachPartition requires 1 args')
        sys.exit(1)
    pp.pprint(client.foreachPartition(eval(args[0]),))

elif cmd == 'foreachExecutor':
    if len(args) != 1:
        print('foreachExecutor requires 1 args')
        sys.exit(1)
    pp.pprint(client.foreachExecutor(eval(args[0]),))

elif cmd == 'top':
    if len(args) != 1:
        print('top requires 1 args')
        sys.exit(1)
    pp.pprint(client.top(eval(args[0]),))

elif cmd == 'top2':
    if len(args) != 2:
        print('top2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.top2(eval(args[0]), eval(args[1]),))

elif cmd == 'takeOrdered':
    if len(args) != 1:
        print('takeOrdered requires 1 args')
        sys.exit(1)
    pp.pprint(client.takeOrdered(eval(args[0]),))

elif cmd == 'takeOrdered2':
    if len(args) != 2:
        print('takeOrdered2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.takeOrdered2(eval(args[0]), eval(args[1]),))

elif cmd == 'keys':
    if len(args) != 0:
        print('keys requires 0 args')
        sys.exit(1)
    pp.pprint(client.keys())

elif cmd == 'values':
    if len(args) != 0:
        print('values requires 0 args')
        sys.exit(1)
    pp.pprint(client.values())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
