#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.comm import ICommModule
from ignis.rpc.executor.comm.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string openGroup()')
    print('  void closeGroup()')
    print('  void joinToGroup(string id, bool leader)')
    print('  void joinToGroupName(string id, bool leader, string name)')
    print('  bool hasGroup(string name)')
    print('  void destroyGroup(string name)')
    print('  void destroyGroups()')
    print('  i8 getProtocol()')
    print('   getPartitions(i8 protocol)')
    print('   getPartitions2(i8 protocol, i64 minPartitions)')
    print('  void setPartitions( partitions)')
    print('  void setPartitions2( partitions, ISource src)')
    print('  void driverGather(string group, ISource src)')
    print('  void driverGather0(string group, ISource src)')
    print('  void driverScatter(string group, i64 partitions)')
    print('  void driverScatter3(string group, i64 partitions, ISource src)')
    print('  void importData(string group, bool source, i64 threads)')
    print('  void importData4(string group, bool source, i64 threads, ISource src)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ICommModule.Client(protocol)
transport.open()

if cmd == 'openGroup':
    if len(args) != 0:
        print('openGroup requires 0 args')
        sys.exit(1)
    pp.pprint(client.openGroup())

elif cmd == 'closeGroup':
    if len(args) != 0:
        print('closeGroup requires 0 args')
        sys.exit(1)
    pp.pprint(client.closeGroup())

elif cmd == 'joinToGroup':
    if len(args) != 2:
        print('joinToGroup requires 2 args')
        sys.exit(1)
    pp.pprint(client.joinToGroup(args[0], eval(args[1]),))

elif cmd == 'joinToGroupName':
    if len(args) != 3:
        print('joinToGroupName requires 3 args')
        sys.exit(1)
    pp.pprint(client.joinToGroupName(args[0], eval(args[1]), args[2],))

elif cmd == 'hasGroup':
    if len(args) != 1:
        print('hasGroup requires 1 args')
        sys.exit(1)
    pp.pprint(client.hasGroup(args[0],))

elif cmd == 'destroyGroup':
    if len(args) != 1:
        print('destroyGroup requires 1 args')
        sys.exit(1)
    pp.pprint(client.destroyGroup(args[0],))

elif cmd == 'destroyGroups':
    if len(args) != 0:
        print('destroyGroups requires 0 args')
        sys.exit(1)
    pp.pprint(client.destroyGroups())

elif cmd == 'getProtocol':
    if len(args) != 0:
        print('getProtocol requires 0 args')
        sys.exit(1)
    pp.pprint(client.getProtocol())

elif cmd == 'getPartitions':
    if len(args) != 1:
        print('getPartitions requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPartitions(eval(args[0]),))

elif cmd == 'getPartitions2':
    if len(args) != 2:
        print('getPartitions2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.getPartitions2(eval(args[0]), eval(args[1]),))

elif cmd == 'setPartitions':
    if len(args) != 1:
        print('setPartitions requires 1 args')
        sys.exit(1)
    pp.pprint(client.setPartitions(eval(args[0]),))

elif cmd == 'setPartitions2':
    if len(args) != 2:
        print('setPartitions2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.setPartitions2(eval(args[0]), eval(args[1]),))

elif cmd == 'driverGather':
    if len(args) != 2:
        print('driverGather requires 2 args')
        sys.exit(1)
    pp.pprint(client.driverGather(args[0], eval(args[1]),))

elif cmd == 'driverGather0':
    if len(args) != 2:
        print('driverGather0 requires 2 args')
        sys.exit(1)
    pp.pprint(client.driverGather0(args[0], eval(args[1]),))

elif cmd == 'driverScatter':
    if len(args) != 2:
        print('driverScatter requires 2 args')
        sys.exit(1)
    pp.pprint(client.driverScatter(args[0], eval(args[1]),))

elif cmd == 'driverScatter3':
    if len(args) != 3:
        print('driverScatter3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.driverScatter3(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'importData':
    if len(args) != 3:
        print('importData requires 3 args')
        sys.exit(1)
    pp.pprint(client.importData(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'importData4':
    if len(args) != 4:
        print('importData4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.importData4(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
