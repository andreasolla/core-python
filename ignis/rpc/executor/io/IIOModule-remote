#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.io import IIOModule
from ignis.rpc.executor.io.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void loadClass(ISource src)')
    print('  void loadLibrary(string path)')
    print('  i64 partitionCount()')
    print('   countByPartition()')
    print('  i64 partitionApproxSize()')
    print('  void plainFile(string path, string delim)')
    print('  void plainFile3(string path, i64 minPartitions, string delim)')
    print('  void textFile(string path)')
    print('  void textFile2(string path, i64 minPartitions)')
    print('  void partitionObjectFile(string path, i64 first, i64 partitions)')
    print('  void partitionObjectFile4(string path, i64 first, i64 partitions, ISource src)')
    print('  void partitionTextFile(string path, i64 first, i64 partitions)')
    print('  void partitionJsonFile4a(string path, i64 first, i64 partitions, bool objectMapping)')
    print('  void partitionJsonFile4b(string path, i64 first, i64 partitions, ISource src)')
    print('  void saveAsObjectFile(string path, i8 compression, i64 first)')
    print('  void saveAsTextFile(string path, i64 first)')
    print('  void saveAsJsonFile(string path, i64 first, bool pretty)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IIOModule.Client(protocol)
transport.open()

if cmd == 'loadClass':
    if len(args) != 1:
        print('loadClass requires 1 args')
        sys.exit(1)
    pp.pprint(client.loadClass(eval(args[0]),))

elif cmd == 'loadLibrary':
    if len(args) != 1:
        print('loadLibrary requires 1 args')
        sys.exit(1)
    pp.pprint(client.loadLibrary(args[0],))

elif cmd == 'partitionCount':
    if len(args) != 0:
        print('partitionCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.partitionCount())

elif cmd == 'countByPartition':
    if len(args) != 0:
        print('countByPartition requires 0 args')
        sys.exit(1)
    pp.pprint(client.countByPartition())

elif cmd == 'partitionApproxSize':
    if len(args) != 0:
        print('partitionApproxSize requires 0 args')
        sys.exit(1)
    pp.pprint(client.partitionApproxSize())

elif cmd == 'plainFile':
    if len(args) != 2:
        print('plainFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.plainFile(args[0], args[1],))

elif cmd == 'plainFile3':
    if len(args) != 3:
        print('plainFile3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.plainFile3(args[0], eval(args[1]), args[2],))

elif cmd == 'textFile':
    if len(args) != 1:
        print('textFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.textFile(args[0],))

elif cmd == 'textFile2':
    if len(args) != 2:
        print('textFile2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.textFile2(args[0], eval(args[1]),))

elif cmd == 'partitionObjectFile':
    if len(args) != 3:
        print('partitionObjectFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionObjectFile(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'partitionObjectFile4':
    if len(args) != 4:
        print('partitionObjectFile4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.partitionObjectFile4(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'partitionTextFile':
    if len(args) != 3:
        print('partitionTextFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionTextFile(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'partitionJsonFile4a':
    if len(args) != 4:
        print('partitionJsonFile4a requires 4 args')
        sys.exit(1)
    pp.pprint(client.partitionJsonFile4a(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'partitionJsonFile4b':
    if len(args) != 4:
        print('partitionJsonFile4b requires 4 args')
        sys.exit(1)
    pp.pprint(client.partitionJsonFile4b(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'saveAsObjectFile':
    if len(args) != 3:
        print('saveAsObjectFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.saveAsObjectFile(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'saveAsTextFile':
    if len(args) != 2:
        print('saveAsTextFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.saveAsTextFile(args[0], eval(args[1]),))

elif cmd == 'saveAsJsonFile':
    if len(args) != 3:
        print('saveAsJsonFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.saveAsJsonFile(args[0], eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
