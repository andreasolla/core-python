#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.executor.math import IMathModule
from ignis.rpc.executor.math.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void sample(bool withReplacement,  num, i32 seed)')
    print('  i64 count()')
    print('  void max()')
    print('  void min()')
    print('  void max1(ISource cmp)')
    print('  void min1(ISource cmp)')
    print('  void sampleByKey(bool withReplacement, ISource fractions, i32 seed)')
    print('  void countByKey()')
    print('  void countByValue()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IMathModule.Client(protocol)
transport.open()

if cmd == 'sample':
    if len(args) != 3:
        print('sample requires 3 args')
        sys.exit(1)
    pp.pprint(client.sample(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'count':
    if len(args) != 0:
        print('count requires 0 args')
        sys.exit(1)
    pp.pprint(client.count())

elif cmd == 'max':
    if len(args) != 0:
        print('max requires 0 args')
        sys.exit(1)
    pp.pprint(client.max())

elif cmd == 'min':
    if len(args) != 0:
        print('min requires 0 args')
        sys.exit(1)
    pp.pprint(client.min())

elif cmd == 'max1':
    if len(args) != 1:
        print('max1 requires 1 args')
        sys.exit(1)
    pp.pprint(client.max1(eval(args[0]),))

elif cmd == 'min1':
    if len(args) != 1:
        print('min1 requires 1 args')
        sys.exit(1)
    pp.pprint(client.min1(eval(args[0]),))

elif cmd == 'sampleByKey':
    if len(args) != 3:
        print('sampleByKey requires 3 args')
        sys.exit(1)
    pp.pprint(client.sampleByKey(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'countByKey':
    if len(args) != 0:
        print('countByKey requires 0 args')
        sys.exit(1)
    pp.pprint(client.countByKey())

elif cmd == 'countByValue':
    if len(args) != 0:
        print('countByValue requires 0 args')
        sys.exit(1)
    pp.pprint(client.countByValue())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
