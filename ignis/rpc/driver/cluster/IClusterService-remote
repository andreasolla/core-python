#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.driver.cluster import IClusterService
from ignis.rpc.driver.cluster.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void start(i64 id)')
    print('  void destroy(i64 id)')
    print('  i64 newInstance0()')
    print('  i64 newInstance1a(string name)')
    print('  i64 newInstance1b(i64 properties)')
    print('  i64 newInstance2(string name, i64 properties)')
    print('  void setName(i64 id, string name)')
    print('  void execute(i64 id,  cmd)')
    print('  void executeScript(i64 id, string script)')
    print('  void sendFile(i64 id, string source, string target)')
    print('  void sendCompressedFile(i64 id, string source, string target)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IClusterService.Client(protocol)
transport.open()

if cmd == 'start':
    if len(args) != 1:
        print('start requires 1 args')
        sys.exit(1)
    pp.pprint(client.start(eval(args[0]),))

elif cmd == 'destroy':
    if len(args) != 1:
        print('destroy requires 1 args')
        sys.exit(1)
    pp.pprint(client.destroy(eval(args[0]),))

elif cmd == 'newInstance0':
    if len(args) != 0:
        print('newInstance0 requires 0 args')
        sys.exit(1)
    pp.pprint(client.newInstance0())

elif cmd == 'newInstance1a':
    if len(args) != 1:
        print('newInstance1a requires 1 args')
        sys.exit(1)
    pp.pprint(client.newInstance1a(args[0],))

elif cmd == 'newInstance1b':
    if len(args) != 1:
        print('newInstance1b requires 1 args')
        sys.exit(1)
    pp.pprint(client.newInstance1b(eval(args[0]),))

elif cmd == 'newInstance2':
    if len(args) != 2:
        print('newInstance2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.newInstance2(args[0], eval(args[1]),))

elif cmd == 'setName':
    if len(args) != 2:
        print('setName requires 2 args')
        sys.exit(1)
    pp.pprint(client.setName(eval(args[0]), args[1],))

elif cmd == 'execute':
    if len(args) != 2:
        print('execute requires 2 args')
        sys.exit(1)
    pp.pprint(client.execute(eval(args[0]), eval(args[1]),))

elif cmd == 'executeScript':
    if len(args) != 2:
        print('executeScript requires 2 args')
        sys.exit(1)
    pp.pprint(client.executeScript(eval(args[0]), args[1],))

elif cmd == 'sendFile':
    if len(args) != 3:
        print('sendFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendFile(eval(args[0]), args[1], args[2],))

elif cmd == 'sendCompressedFile':
    if len(args) != 3:
        print('sendCompressedFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendCompressedFile(eval(args[0]), args[1], args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
