#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.driver.properties import IPropertiesService
from ignis.rpc.driver.properties.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i64 newInstance()')
    print('  i64 newInstance2(i64 id)')
    print('  string setProperty(i64 id, string key, string value)')
    print('  string getProperty(i64 id, string key)')
    print('  string rmProperty(i64 id, string key)')
    print('  bool contains(i64 id, string key)')
    print('   toMap(i64 id, bool defaults)')
    print('  void fromMap(i64 id,  map_)')
    print('  void load(i64 id, string path)')
    print('  void store(i64 id, string path)')
    print('  void clear(i64 id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IPropertiesService.Client(protocol)
transport.open()

if cmd == 'newInstance':
    if len(args) != 0:
        print('newInstance requires 0 args')
        sys.exit(1)
    pp.pprint(client.newInstance())

elif cmd == 'newInstance2':
    if len(args) != 1:
        print('newInstance2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.newInstance2(eval(args[0]),))

elif cmd == 'setProperty':
    if len(args) != 3:
        print('setProperty requires 3 args')
        sys.exit(1)
    pp.pprint(client.setProperty(eval(args[0]), args[1], args[2],))

elif cmd == 'getProperty':
    if len(args) != 2:
        print('getProperty requires 2 args')
        sys.exit(1)
    pp.pprint(client.getProperty(eval(args[0]), args[1],))

elif cmd == 'rmProperty':
    if len(args) != 2:
        print('rmProperty requires 2 args')
        sys.exit(1)
    pp.pprint(client.rmProperty(eval(args[0]), args[1],))

elif cmd == 'contains':
    if len(args) != 2:
        print('contains requires 2 args')
        sys.exit(1)
    pp.pprint(client.contains(eval(args[0]), args[1],))

elif cmd == 'toMap':
    if len(args) != 2:
        print('toMap requires 2 args')
        sys.exit(1)
    pp.pprint(client.toMap(eval(args[0]), eval(args[1]),))

elif cmd == 'fromMap':
    if len(args) != 2:
        print('fromMap requires 2 args')
        sys.exit(1)
    pp.pprint(client.fromMap(eval(args[0]), eval(args[1]),))

elif cmd == 'load':
    if len(args) != 2:
        print('load requires 2 args')
        sys.exit(1)
    pp.pprint(client.load(eval(args[0]), args[1],))

elif cmd == 'store':
    if len(args) != 2:
        print('store requires 2 args')
        sys.exit(1)
    pp.pprint(client.store(eval(args[0]), args[1],))

elif cmd == 'clear':
    if len(args) != 1:
        print('clear requires 1 args')
        sys.exit(1)
    pp.pprint(client.clear(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
