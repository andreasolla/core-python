#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ignis.rpc.driver.worker import IWorkerService
from ignis.rpc.driver.worker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void start(IWorkerId id)')
    print('  void destroy(IWorkerId id)')
    print('  IWorkerId newInstance(i64 id, string type)')
    print('  IWorkerId newInstance3(i64 id, string name, string type)')
    print('  IWorkerId newInstance4(i64 id, string type, i32 cores, i32 instances)')
    print('  IWorkerId newInstance5(i64 id, string name, string type, i32 cores, i32 instances)')
    print('  void setName(IWorkerId id, string name)')
    print('  IDataFrameId parallelize(IWorkerId id, i64 dataId, i64 partitions)')
    print('  IDataFrameId parallelize4(IWorkerId id, i64 dataId, i64 partitions, ISource src)')
    print('  IDataFrameId importDataFrame(IWorkerId id, IDataFrameId data)')
    print('  IDataFrameId importDataFrame3(IWorkerId id, IDataFrameId data, ISource src)')
    print('  IDataFrameId plainFile(IWorkerId id, string path, string delim)')
    print('  IDataFrameId plainFile4(IWorkerId id, string path, i64 minPartitions, string delim)')
    print('  IDataFrameId textFile(IWorkerId id, string path)')
    print('  IDataFrameId textFile3(IWorkerId id, string path, i64 minPartitions)')
    print('  IDataFrameId partitionObjectFile(IWorkerId id, string path)')
    print('  IDataFrameId partitionObjectFile3(IWorkerId id, string path, ISource src)')
    print('  IDataFrameId partitionTextFile(IWorkerId id, string path)')
    print('  IDataFrameId partitionJsonFile3a(IWorkerId id, string path, bool objectMapping)')
    print('  IDataFrameId partitionJsonFile3b(IWorkerId id, string path, ISource src)')
    print('  void loadLibrary(IWorkerId id, string lib)')
    print('  void execute(IWorkerId id, ISource src)')
    print('  IDataFrameId executeTo(IWorkerId id, ISource src)')
    print('  void voidCall(IWorkerId id, ISource src)')
    print('  void voidCall3(IWorkerId id, IDataFrameId data, ISource src)')
    print('  IDataFrameId call(IWorkerId id, ISource src)')
    print('  IDataFrameId call3(IWorkerId id, IDataFrameId data, ISource src)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = IWorkerService.Client(protocol)
transport.open()

if cmd == 'start':
    if len(args) != 1:
        print('start requires 1 args')
        sys.exit(1)
    pp.pprint(client.start(eval(args[0]),))

elif cmd == 'destroy':
    if len(args) != 1:
        print('destroy requires 1 args')
        sys.exit(1)
    pp.pprint(client.destroy(eval(args[0]),))

elif cmd == 'newInstance':
    if len(args) != 2:
        print('newInstance requires 2 args')
        sys.exit(1)
    pp.pprint(client.newInstance(eval(args[0]), args[1],))

elif cmd == 'newInstance3':
    if len(args) != 3:
        print('newInstance3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.newInstance3(eval(args[0]), args[1], args[2],))

elif cmd == 'newInstance4':
    if len(args) != 4:
        print('newInstance4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.newInstance4(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'newInstance5':
    if len(args) != 5:
        print('newInstance5 requires 5 args')
        sys.exit(1)
    pp.pprint(client.newInstance5(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'setName':
    if len(args) != 2:
        print('setName requires 2 args')
        sys.exit(1)
    pp.pprint(client.setName(eval(args[0]), args[1],))

elif cmd == 'parallelize':
    if len(args) != 3:
        print('parallelize requires 3 args')
        sys.exit(1)
    pp.pprint(client.parallelize(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'parallelize4':
    if len(args) != 4:
        print('parallelize4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.parallelize4(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'importDataFrame':
    if len(args) != 2:
        print('importDataFrame requires 2 args')
        sys.exit(1)
    pp.pprint(client.importDataFrame(eval(args[0]), eval(args[1]),))

elif cmd == 'importDataFrame3':
    if len(args) != 3:
        print('importDataFrame3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.importDataFrame3(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'plainFile':
    if len(args) != 3:
        print('plainFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.plainFile(eval(args[0]), args[1], args[2],))

elif cmd == 'plainFile4':
    if len(args) != 4:
        print('plainFile4 requires 4 args')
        sys.exit(1)
    pp.pprint(client.plainFile4(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'textFile':
    if len(args) != 2:
        print('textFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.textFile(eval(args[0]), args[1],))

elif cmd == 'textFile3':
    if len(args) != 3:
        print('textFile3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.textFile3(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'partitionObjectFile':
    if len(args) != 2:
        print('partitionObjectFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.partitionObjectFile(eval(args[0]), args[1],))

elif cmd == 'partitionObjectFile3':
    if len(args) != 3:
        print('partitionObjectFile3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionObjectFile3(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'partitionTextFile':
    if len(args) != 2:
        print('partitionTextFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.partitionTextFile(eval(args[0]), args[1],))

elif cmd == 'partitionJsonFile3a':
    if len(args) != 3:
        print('partitionJsonFile3a requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionJsonFile3a(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'partitionJsonFile3b':
    if len(args) != 3:
        print('partitionJsonFile3b requires 3 args')
        sys.exit(1)
    pp.pprint(client.partitionJsonFile3b(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'loadLibrary':
    if len(args) != 2:
        print('loadLibrary requires 2 args')
        sys.exit(1)
    pp.pprint(client.loadLibrary(eval(args[0]), args[1],))

elif cmd == 'execute':
    if len(args) != 2:
        print('execute requires 2 args')
        sys.exit(1)
    pp.pprint(client.execute(eval(args[0]), eval(args[1]),))

elif cmd == 'executeTo':
    if len(args) != 2:
        print('executeTo requires 2 args')
        sys.exit(1)
    pp.pprint(client.executeTo(eval(args[0]), eval(args[1]),))

elif cmd == 'voidCall':
    if len(args) != 2:
        print('voidCall requires 2 args')
        sys.exit(1)
    pp.pprint(client.voidCall(eval(args[0]), eval(args[1]),))

elif cmd == 'voidCall3':
    if len(args) != 3:
        print('voidCall3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.voidCall3(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'call':
    if len(args) != 2:
        print('call requires 2 args')
        sys.exit(1)
    pp.pprint(client.call(eval(args[0]), eval(args[1]),))

elif cmd == 'call3':
    if len(args) != 3:
        print('call3 requires 3 args')
        sys.exit(1)
    pp.pprint(client.call3(eval(args[0]), eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
